// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: proto/kgs.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KgsClient is the client API for Kgs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KgsClient interface {
	GenKey(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*KeyResponse, error)
}

type kgsClient struct {
	cc grpc.ClientConnInterface
}

func NewKgsClient(cc grpc.ClientConnInterface) KgsClient {
	return &kgsClient{cc}
}

func (c *kgsClient) GenKey(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*KeyResponse, error) {
	out := new(KeyResponse)
	err := c.cc.Invoke(ctx, "/Kgs/GenKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KgsServer is the server API for Kgs service.
// All implementations must embed UnimplementedKgsServer
// for forward compatibility
type KgsServer interface {
	GenKey(context.Context, *KeyRequest) (*KeyResponse, error)
	mustEmbedUnimplementedKgsServer()
}

// UnimplementedKgsServer must be embedded to have forward compatible implementations.
type UnimplementedKgsServer struct {
}

func (UnimplementedKgsServer) GenKey(context.Context, *KeyRequest) (*KeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenKey not implemented")
}
func (UnimplementedKgsServer) mustEmbedUnimplementedKgsServer() {}

// UnsafeKgsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KgsServer will
// result in compilation errors.
type UnsafeKgsServer interface {
	mustEmbedUnimplementedKgsServer()
}

func RegisterKgsServer(s grpc.ServiceRegistrar, srv KgsServer) {
	s.RegisterService(&Kgs_ServiceDesc, srv)
}

func _Kgs_GenKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KgsServer).GenKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kgs/GenKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KgsServer).GenKey(ctx, req.(*KeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Kgs_ServiceDesc is the grpc.ServiceDesc for Kgs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Kgs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Kgs",
	HandlerType: (*KgsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenKey",
			Handler:    _Kgs_GenKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/kgs.proto",
}
